generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Branch {
  id          String     @id @default(uuid())
  name        String
  description String?
  address     String?
  latitude    Float?
  longitude   Float?
  deviceId    String     @unique
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orders      Order[]
  menuItems   MenuItem[]
}

model MenuItem {
  id          String     @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    String     @default("عام")
  isAvailable Boolean    @default(true)
  branchId    String
  branch      Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id             String      @id @default(uuid())
  orderNumber    String      @unique
  status         OrderStatus @default(PENDING)
  branchId       String
  branch         Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  customerName   String?
  customerPhone  String?
  customerEmail  String?
  totalAmount    Float
  paymentMethod  String?
  orderItems     OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deliveryMethod String?
  deliveryAddress String?
  notes          String?
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId  String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  quantity    Int
  price       Float
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id             String   @id
  shop           String
  state          String?
  isOnline       Boolean
  scope          String?
  expires        DateTime?
  accessToken    String
  userId         String?
  firstName      String?  // <-- أضفهم هنا
  lastName       String?
  email          String?
  accountOwner   Boolean?
  locale         String?
  collaborator   Boolean?
  emailVerified  Boolean?
}



model AppSettings {
  id                    String  @id @default("settings")
  defaultBranchId       String?
  orderNotificationEmail String?
  enableOrderSound      Boolean @default(true)
  minimumOrderAmount    Float   @default(0)
  currency              String  @default("USD")
  companyName           String?
  companyLogo           String?
  contactPhone          String?
  contactEmail          String?
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}
